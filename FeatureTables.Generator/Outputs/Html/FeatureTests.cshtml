@using System.Linq
@using System.Text.RegularExpressions
@inherits DependencyInjection.FeatureTables.Generator.Outputs.Html.HtmlTemplateBase<System.Collections.Generic.IEnumerable<DependencyInjection.FeatureTables.Generator.Data.FeatureTable>>

<!DOCTYPE html>
@* Metanote: Ignore the following note in Razor template, it is only relevant to the result. *@
<!-- Note: This file has been generated by TableGenerator and should not be edited manually. -->
<html>
  <head>
    <title>Dependency Injection Feature Tests (.NET)</title>
    <link rel='stylesheet' href='FeatureTests.css' />
  </head>
  <body>
    <div class="content">
      <span id="fork-on-github"><a href="https://github.com/codepo8/css-fork-on-github-ribbon">Fork me on GitHub</a></span>

      <h1>Dependency Injection Feature Tests (.NET)</h1>

      @foreach (var table in Model) {
      <section>
        <h2>@table.DisplayName</h2>
        <div class="table-description">@FormatDescription(table.Description)</div>
        
        @{ var featuresWithDescription = table.Features.Where(f => !string.IsNullOrEmpty(f.Description)).ToArray(); }
        @if (featuresWithDescription.Any()) {
          <dl class="feature-descriptions">
            @foreach (var feature in featuresWithDescription) {
              <dt>@feature.Name</dt>
              <dd>@FormatDescription(feature.Description)</dd>
            }
          </dl>
        }

        <table>
          <tr>
            <th>Framework</th>
            @foreach (var feature in table.Features) {
              <th title="@feature.Name">@feature.Name</th>
            }
          </tr>
          @{ var linkPrefix = Regex.Replace(table.DisplayName, @"\W+", "-").ToLowerInvariant(); }
          @{ var comments = table.GetRows().SelectMany(r => r.Item2)
                                           .Where(c => c.HasComment)
                                           .Select(c => c.Comment)
                                           .GroupBy(c => c)
                                           .Select((g, index) => new { comment = g.Key, index = index + 1 })
                                           .ToList(); } 

          @foreach (var row in table.GetRows()) {
          <tr>
            <td class="framework-name">@row.Item1.FrameworkName</td>
            @foreach (var cell in row.Item2) {
              <td class="@(cell.State.ToString().ToLowerInvariant())">
              @if (cell.HasComment) {
                  var index = @comments.Single(x => x.comment == @cell.Comment).index;
                  <a class="local" href="#@linkPrefix-@index">@cell.DisplayText<sup>@index</sup></a>
              }
              else if (cell.DisplayUri != null) {
                  <a href="@cell.DisplayUri">@cell.DisplayText</a>
              }
              else {
                  @cell.DisplayText
              }
              </td>
            }
          </tr>
          }
        </table>
        
        <ol class="comments">
        @foreach (var x in comments) {
          <li id="@linkPrefix-@x.index">@FormatDescription(x.comment)</li>
        }
        </ol>
      </section>
      }
      
      <section>
        <h2>Not tested</h2>
        <div class="table-description">
          <p>List of containers I couldn't test, with corresponding reasons.</p>
        </div>

        <dl class="not-tested">
          <dt>fFastInjector</dt>
          <dd>Static only: would require an AppDomain to test properly.</dd>
          
          <dt>Funq</dt>
          <dd>Not found on NuGet.</dd>
          
          <dt>Griffin</dt>
          <dd>Complex API. Please feel free to do a pull request for it.</dd>
          
          <dt>Hiro</dt>
          <dd>Complex API.</dd>
          
          <dt>LightInject</dt>
          <dd>Code-only NuGet package.</dd>
          
          <dt>Petite</dt>
          <dd>Code-only NuGet package.</dd>
          
          <dt>Speedioc</dt>
          <dd>I can't quickly figure out how to register an instance.</dd>
          
          <dt>Stiletto</dt>
          <dd>Seems to use attribute-only registration.</dd>
          
          <dt>TinyIoc</dt>
          <dd>Code-only NuGet package.</dd>
        </dl>
      </section>
    </div>
  </body>
</html>