@using System.Linq
@using FeatureTests.Runner.Sources
@using AshMind.Extensions
@inherits FeatureTests.Runner.Outputs.Html.HtmlTemplateBase<FeatureTests.Runner.Outputs.Html.HtmlResultModel>

<!DOCTYPE html>
@* Metanote: Ignore the following note in Razor template, it is only relevant to the result. *@
<!-- Note: This file has been generated by TableGenerator and should not be edited manually. -->
<html>
  <head>
    <title>@Model.Labels.Title</title>
    <meta name="viewport" content="width=device-width, user-scalable=no" />

    <link rel='stylesheet' href='css/tooltipster.css' />
    <link rel='stylesheet' href='css/main.css' />
    
    <script type="text/javascript" src="http://code.jquery.com/jquery-2.0.3.min.js"></script>
    <script type="text/javascript" src="js/jquery.tooltipster.min.js"></script>
    <script type="text/javascript" src="js/waypoints.min.js"></script>
    <script type="text/javascript" src="js/main.js"></script>
  </head>
  <body>
    <nav class="main-nav">
      <ul>
      @foreach (var link in Model.Navigation) {
        <li>
          <a href="@link.Url" @(@link.OnCurrentPage ? "data-same-page" : null)>@link.Name</a>
          <ul>
          @foreach (var childLink in link.ChildLinks) {
            <li><a href="@childLink.Url" @(@link.OnCurrentPage ? "data-same-page" : null)>@childLink.Name</a></li>
          }
          </ul>
        </li>
      }
      </ul>
      
      <!--ul class="toc"></ul-->
    </nav>

    <main class="content">
      <h1>@Model.Labels.Title</h1>

      <!-- TODO: move this to a separate (navigable) file
      <section>
        <h2 id="GeneralInformation">General information</h2>
        <div class="section-description">
          <p>The goal of this project is to monitor support for important features across multiple libraries.</p>
          <p>You can find the code behind these tables in <a href="https://github.com/ashmind/net-feature-tests">net-feature-tests GitHub project</a>.</p>

          <p>Please note the following:</p>
          <ol>
            <li>The list of features is based on what I consider to be important. It is not an objective measure on which library is "better".</li>
            <li>It is not possible to test for all features automatically. For example, extensibility is very important, but impossible to test/measure.</li>
            <li>The test results might not necessary be up to date (see the version for each library).</li>
            <li>The test code should not be seen as best practice for each library — it forces all of them to the same test interface.</li>
            <li>I am not an expert on all libraries and not all adapters were reviewed by authors. So feature may fail because of incorrect adapter.</li>
          </ol>
            
          <p>Thanks for reading!</p>
        </div>
      </section>
      End of TODO -->

      @foreach (var table in Model.Tables) {
      <section>
        <h2 id="@Model.TableIdMap[table]">@table.DisplayName</h2>
        <div class="section-description">@FormatDescription(table.Description)</div>
        
        <table>
          <tr>
            <th>Name</th>
            @foreach (var library in table.Libraries) {
              <th><span>@library.Name</span></th>
            }
          </tr>

          @foreach (var row in table.GetFeatureRows()) {
            var feature = row.Item1;
          <tr>
            <td class="row-name"><span @RawHtml(!feature.Description.IsNullOrWhiteSpace() ? "title=\"" + FormatDescription(feature.Description) + "\"" : null)>@feature.Name</span></td>
            @foreach (var cell in row.Item2) {
              <td class="@GetCssClassesForCell(cell)">
              @if (cell.HasComment) {
                  <span title="@cell.Comment">@FormatDisplayValue(cell.DisplayValue)</span>
              }
              else if (cell.DisplayUri != null) {
                  <a href="@cell.DisplayUri">@FormatDisplayValue(cell.DisplayValue)</a>
              }
              else {
                  @FormatDisplayValue(cell.DisplayValue)
              }
              </td>
            }
          </tr>
          }
        </table>
      </section>
      }
      
      @RawHtml(Model.HtmlAfterAll)
    </main>
    
    <script type="text/javascript">
      var model = {
          libraryCount: @Model.Tables.First().Libraries.Count
      };
    </script>
  </body>
</html>